"""
Django settings for lafreniere_site project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import platform
import os
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Environment variables ---
env = environ.Env(
    DEBUG=(bool, True),
    SECRET_KEY=(str, "django-insecure-change-me")
)
# Load .env file in development; in production, environment variables are set via systemd
env_file = BASE_DIR / ".env"
if env_file.exists():
    env.read_env(env_file=env_file)
else:
    env.read_env()

# --- Secret & Debug ---
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")

# --- Hosts & CSRF ---
if DEBUG:
    # En mode debug, autorise tous les hôtes et désactive CSRF strict pour HTTP
    ALLOWED_HOSTS = ['*']
    CSRF_TRUSTED_ORIGINS = []
else:
    # En production, utilise les variables d'environnement
    ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])
    raw_csrf = env.list('CSRF_TRUSTED_ORIGINS', default=[])
    CSRF_TRUSTED_ORIGINS = []
    for origin in raw_csrf:
        if origin.startswith('http://') or origin.startswith('https://'):
            CSRF_TRUSTED_ORIGINS.append(origin)
        else:
            CSRF_TRUSTED_ORIGINS.append(f"https://{origin}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'core',
    'tailwind',
    'theme'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lafreniere_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "core.context_processors.tidio_settings",
            ],
        },
    },
]

WSGI_APPLICATION = 'lafreniere_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Tailwind configuration ---
TAILWIND_APP_NAME = 'theme'
if platform.system().lower() == "windows":
    NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"
else:
    NPM_BIN_PATH = env("NPM_BIN_PATH", default="/usr/bin/npm")


# --- Static & Media files ---
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

TIDIO_PUBLIC_KEY = os.environ.get("TIDIO_PUBLIC_KEY", "XXXXXXXXXXXXXXX")


# --- Database configuration ---
DB_ENGINE = env("DB_ENGINE", default="django.db.backends.sqlite3")
if DB_ENGINE == 'django.db.backends.sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': BASE_DIR / env("DB_NAME", default="db.sqlite3"),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': env("DB_NAME"),
            'USER': env("DB_USER"),
            'PASSWORD': env("DB_PASSWORD"),
            'HOST': env("DB_HOST"),
            'PORT': env("DB_PORT"),
        }
    }


# --- Security settings ---
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_SSL_REDIRECT = not DEBUG
X_FRAME_OPTIONS = 'DENY'

# --- Tailwind configuration ---
TAILWIND_APP_NAME = 'theme'
if platform.system().lower() == "windows":
    NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"
else:
    NPM_BIN_PATH = env("NPM_BIN_PATH", default="/usr/bin/npm")

# --- Channels & Celery (optional) ---
REDIS_URL = env("REDIS_URL", default="redis://127.0.0.1:6379/0")

# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LANGUAGE_CODE = 'fr'

TIME_ZONE = 'America/Toronto'  # Ou 'Europe/Paris' si tu es en Europe

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuration de la connexion Redis pour RQ
RQ_QUEUES = {
    'default': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
        'DEFAULT_TIMEOUT': 360,
    },
}

CORS_ALLOW_ALL_ORIGINS = True

# Autoriser Framer
CORS_ALLOWED_ORIGINS = [
    "https://3hl2zkxpruczt7pqspgb0cmrt.plugins.framercdn.com",
]

# Autoriser les headers dont ton API a besoin
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]